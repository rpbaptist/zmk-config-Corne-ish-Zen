/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define TYPE   0
#define GAME   1
#define WASD   2
#define GAMEXT 3
#define SYM    4
#define NAV    5
#define NUM    6
#define CONFIG 7

&mt {
    tapping-term-ms = <160>;
    quick-tap-ms = <220>;
};

/ {
        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer_1 {
                if-layers = <SYM NAV>;
                then-layer = <CONFIG>;
            };
            // tri_layer_2 {
            //     if-layers = <GAMEXT NAV>;
            //     then-layer = <CONFIG>;
            // };
        };

        behaviors {
          bspdel: backspace_del {
              compatible = "zmk,behavior-mod-morph";
              label = "BACKSPACE_DEL";
              #binding-cells = <0>;
              bindings = <&kp BACKSPACE>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>;
          };

          shspc: shift_space {
              compatible = "zmk,behavior-hold-tap";
              label = "SHIFT_SPACE";
              #binding-cells = <2>;
              tapping-term-ms = <140>;
              quick-tap-ms = <200>;
              flavor = "tap-preferred";
              bindings = <&kp>, <&kp>;
          };

          shent: shift_enter {
              compatible = "zmk,behavior-hold-tap";
              label = "SHIFT_ENTER";
              #binding-cells = <2>;
              tapping-term-ms = <120>;
              quick-tap-ms = <200>;
              flavor = "balanced";
              bindings = <&kp>, <&kp>;
          };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "TYPE";
                        bindings = <
   &kp ESC        &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI &bspdel
   &lt NUM TAB    &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &kp SQT
   &mt LCTRL LBKT &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &mt RCTRL RBKT
                &kp LALT &mo SYM &shspc LSHIFT SPACE   &shent RSHIFT RET &mo NAV &kp RGUI
                        >;
                };

                game_layer {
                        label = "GAME";
                        bindings = <
   &kp ESC   &kp Q &kp W &kp F &kp P &kp B     &kp J &kp L  &kp U     &kp Y   &kp SEMI &kp BSPC
   &kp TAB   &kp A &kp R &kp S &kp T &kp G     &kp M &kp N  &kp E     &kp I   &kp O    &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp D &kp V     &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp RCTRL
           &none &kp LSHFT &kp SPACE   &shent RSHIFT RET &mo NAV &kp RGUI
                        >;
                };

                game_wasd_layer {
                        label = "WASD";
                        bindings = <
   &kp ESC   &kp T &kp Q &kp W &kp E &kp R     &kp Y &kp U &kp I    &kp O   &kp P    &kp BSPC
   &kp TAB   &kp G &kp A &kp S &kp D &kp F     &kp H &kp J &kp K    &kp L   &kp QUOT    &kp SQT
   &kp LCTRL &kp B &kp Z &kp X &kp C &kp V     &kp N &kp M &kp CMMA &kp DOT &kp FSLH &kp RCTRL
            &none &kp LSHFT &kp SPACE   &shent RSHIFT RET &mo NAV &kp RGUI
                        >;
                };

                game_extension_layer {
                        label = "GAMEXT";
                        bindings = <
   &kp GRAVE &kp N1   &kp N2  &kp N3   &kp N4   &kp N5        &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp DEL
   &kp TAB   &kp Y    &kp I   &kp J    &kp M    &kp N         &trans &trans &trans &trans &trans &trans
   &kp CAPS  &kp CMMA &kp DOT &kp LBKT &kp RBKT &kp BSLH      &trans &trans &trans &trans &trans &trans
                               &trans &kp LALT &kp ENTER    &kp ENTER &trans &trans
                        >;
                };

                sym_layer {
                        label = "SYM";
                        bindings = <
   &kp GRAVE        &kp N1   &kp N2  &kp N3    &kp N4     &kp N5       &kp N6    &kp N7   &kp N8    &kp N9    &kp N0    &kp DEL
   &kp TILDE        &kp EXCL &kp AT  &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET &kp AMPS &kp ASTRK &kp UNDER &kp MINUS &kp PLUS
   &mt LCTRL LPAR   &none    &none   &none     &none      &caps_word   &kp EQUAL &kp PIPE &kp LT    &kp GT    &kp EXCL  &mt RCTRL RPAR
                          	         &trans     &trans   &trans        &trans  &trans   &trans
                        >;
                };

                nav_layer {
                        label = "NAV";
                        bindings = <
   &kp GRAVE       &kp F1  &kp F2  &kp F3  &kp F4    &kp F5       &kp PG_UP  &kp HOME        &kp UP    &kp END     &kp RPAR &kp DEL
   &kp TILDE       &kp F6  &kp F7  &kp F8  &kp F9    &kp F10      &kp PG_DN  &kp LEFT        &kp DOWN  &kp RIGHT   &none    &none
   &mt LCTRL LPAR  &kp F11 &kp F12 &kp F13 &kp PSCRN &kp CAPS     &kp LA(F4) &kp LC(LS(TAB)) &kp LC(W) &kp LC(TAB) &kp BSLH &mt RCTRL RPAR
                          	      &trans     &trans   &trans       &trans  &trans   &trans
                        >;
                };

                num_layer {
                        label = "NUM";
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0 &kp C_PREV  &kp C_VOL_UP &kp C_NEXT  &none              &none     &kp N7  &kp N8  &kp N9  &trans    &trans
   &mo NUM    &bt BT_SEL 1 &kp C_STOP  &kp C_VOL_DN &kp C_PP    &none              &kp UNDER &kp N4  &kp N5  &kp N6  &kp MINUS &kp PLUS
   &none      &bt BT_SEL 2 &none       &kp C_MUTE   &kp PSCRN   &kp KP_NUM         &kp EQUAL &kp N1  &kp N2  &kp N3  &kp FSLH  &kp ASTRK
                          	                     &trans     &trans    &trans      &trans    &kp N0   &kp DOT
                        >;
                };

                config_layer {
                        label = "CONFIG";
                        bindings = <
   &none &none       &none &none &none &to TYPE      &none &none &none &none &none &none
   &none &none       &none &none &none &to GAME      &none &none &none &none &none &none
   &none &kp C_SLEEP &none &none &none &to WASD      &none &none &none &none &none &none
                            &trans &trans &trans    &trans &trans &trans
                        >;
                };
        };
};
